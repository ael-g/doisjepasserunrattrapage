{"version":3,"sources":["YearCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["YearCalculator","props","state","year","console","log","fetch","process","then","res","json","result","itemProcessed","computeBloc","setState","unit","grade","credit","creditDisp","name","type","item","ret","this","push","isNaN","Math","round","event","path","value","target","changeValueInBloc","bloc","processedItem","Object","assign","items","parseFloat","color","map","semestre","Typography","style","styleValidated","variant","ue","ec","TextField","onChange","e","onChangeGrade","defaultValue","width","React","Component","App","basename","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7412b90.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nclass YearCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: {'items': []}\n    };\n  }\n\n  componentDidMount() {\n    console.log('Fetching things');\n    fetch(`${process.env.PUBLIC_URL}/diploma/nanterre-l1-histoiredelart-ead.json`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const {itemProcessed} = this.computeBloc(result)\n          console.log(itemProcessed)\n            this.setState({\n              year: itemProcessed\n            });\n        })\n  }\n\n  computeBloc(unit){\n    let grade = 0\n    let credit = 0\n    let creditDisp = 0\n    let itemProcessed = {\n      'name': unit.name,\n      'type': unit.type,\n      'items': []\n    }\n\n    for(const item of unit['items']) {\n      if('items' in item) {\n        // Node\n        const ret = this.computeBloc(item)\n        itemProcessed['items'].push(ret['itemProcessed'])\n\n        if(! isNaN(ret.grade)) {\n          grade += ret.grade * ret.credit\n          credit += ret.credit\n        } else {\n          creditDisp += ret.credit\n        }\n      } else {\n        // Leaf\n        itemProcessed['items'].push(item)\n\n        if(item['disp']) {\n          creditDisp += item['credit']\n        } else {\n          grade += item['value'] * item['credit']\n          credit += item['credit']\n        }\n      }\n    }\n\n    grade = Math.round((grade / credit) * 1000) / 1000\n    credit += creditDisp\n      \n    itemProcessed['grade'] = grade\n    itemProcessed['credit'] = credit\n\n    return {itemProcessed, grade, credit}\n  }\n\n  onChangeGrade(event, path) {\n    const value = event.target.value\n    let year = this.changeValueInBloc(this.state.year, path, value)\n    year = this.computeBloc(year)\n    year = year.itemProcessed\n\n    this.setState({\n      year\n    })\n  }\n\n  changeValueInBloc(bloc, path, value) {\n    const processedItem = Object.assign({}, bloc)\n    if('items' in processedItem) {\n      let items = []\n      \n      for(let item of bloc['items']) {\n        const ret = this.changeValueInBloc(item, path['child'], value)\n        items.push(ret)\n      }\n\n      processedItem['items'] = items\n    } else {\n      if(processedItem['name'] === path['name']) {\n        processedItem['value'] = parseFloat(value)\n      }\n      // console.log('We should be at EC', processedItem)\n      // console.log('We should be at PATH', path)\n    }\n\n    return processedItem\n  }\n\n  styleValidated(grade) {\n    if(grade >= 10) {\n      return {color: 'green'}\n    }else{\n      return {color: 'red'}\n    }\n  }\n  \n  render() {\n    const year = this.state.year\n\n    return (\n      year['items'].map((semestre) => \n      <div key={semestre['name']}>\n        <Typography style={this.styleValidated(semestre['grade'])} variant=\"h4\">{semestre['name']} {semestre['grade']}</Typography>{ \n          semestre['items'].map((ue) => \n          <div key={ue['name']}>\n            <Typography style={this.styleValidated(ue['grade'])} variant=\"h5\">{ue['name']} {ue['grade']}</Typography>\n            {\n              ue['items'].map((ec) =>\n              <div key={ec['name']}>\n                <Typography style={this.styleValidated(ec['value'])}>\n                  {ec['name']} - {ec['credit']}\n                  <TextField onChange={(e) => this.onChangeGrade(e, {\n                      'name': semestre['name'],\n                      'child': {\n                        'name': ue['name'],\n                        'child': {\n                          'name': ec['name'],\n                          'child': {\n                            'name': ec['name']\n                          }\n                        } \n                      }  \n                    })} defaultValue={ec['value']} variant=\"outlined\" style={{width: \"60px\"}}/>\n                </Typography>\n              </div>\n              )\n            }\n          </div>)\n        }\n      </div>\n      )\n    )\n  }\n}\n\nexport {YearCalculator}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport {YearCalculator} from './YearCalculator'\n\nimport './App.css';\n\nfunction App(props) {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"App\">\n      <YearCalculator></YearCalculator>\n    </div>\n    </Router>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}